import sqlite3
from datetime import datetime, timedelta

# Connect to SQLite database (or create it if it doesn't exist)
conn = sqlite3.connect("study_planner.db")
cursor = conn.cursor()

# Create Users table to store user profiles
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    study_hours_per_week INTEGER,  -- Total hours student can study per week
    preferred_study_times TEXT  -- Preferred time slots for studying (e.g., "Evenings")
);
''')

# Create Subjects table to store study subjects and workload
cursor.execute('''
CREATE TABLE IF NOT EXISTS subjects (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT NOT NULL,  -- Subject name (e.g., Mathematics)
    workload INTEGER,  -- Estimated study hours required per week
    priority INTEGER,  -- Priority level (1 = low, 5 = high)
    FOREIGN KEY(user_id) REFERENCES users(id)
);
''')

# Create Study Sessions table to track scheduled study blocks
cursor.execute('''
CREATE TABLE IF NOT EXISTS study_sessions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    subject_id INTEGER,
    start_time TEXT,  -- Scheduled start time of the study session
    end_time TEXT,  -- Scheduled end time of the study session
    completed BOOLEAN DEFAULT 0,  -- Indicates if the session was completed
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(subject_id) REFERENCES subjects(id)
);
''')

# Function to generate a study schedule using a greedy approach
def generate_study_schedule(user_id):
    """
    Greedy algorithm to allocate study sessions based on workload priority.
    - Prioritizes high-importance subjects first.
    - Allocates study blocks dynamically.
    """
    cursor.execute("SELECT study_hours_per_week FROM users WHERE id = ?", (user_id,))
    user_data = cursor.fetchone()
    if not user_data:
        return "User not found"
    
    total_study_hours = user_data[0]
    available_time_slots = [datetime.now() + timedelta(hours=i) for i in range(total_study_hours)]
    
    # Fetch subjects ordered by priority (descending)
    cursor.execute("SELECT id, name, workload, priority FROM subjects WHERE user_id = ? ORDER BY priority DESC", (user_id,))
    subjects = cursor.fetchall()
    
    schedule = []
    for subject in subjects:
        subject_id, subject_name, workload, _ = subject
        allocated_hours = min(workload, total_study_hours)  # Allocate study time
        for i in range(allocated_hours):
            if i < len(available_time_slots):
                start_time = available_time_slots.pop(0)
                end_time = start_time + timedelta(hours=1)
                cursor.execute("INSERT INTO study_sessions (user_id, subject_id, start_time, end_time) VALUES (?, ?, ?, ?)",
                               (user_id, subject_id, start_time.strftime('%Y-%m-%d %H:%M:%S'), end_time.strftime('%Y-%m-%d %H:%M:%S')))
                schedule.append((subject_name, start_time.strftime('%Y-%m-%d %H:%M:%S'), end_time.strftime('%Y-%m-%d %H:%M:%S')))
    
    conn.commit()
    return schedule

# Insert sample user data
cursor.execute("INSERT INTO users (name, study_hours_per_week, preferred_study_times) VALUES (?, ?, ?)",
               ("John Doe", 10, "Evenings"))
user_id = cursor.lastrowid

# Insert sample subjects
cursor.execute("INSERT INTO subjects (user_id, name, workload, priority) VALUES (?, ?, ?, ?)",
               (user_id, "Mathematics", 4, 5))
cursor.execute("INSERT INTO subjects (user_id, name, workload, priority) VALUES (?, ?, ?, ?)",
               (user_id, "History", 3, 3))
cursor.execute("INSERT INTO subjects (user_id, name, workload, priority) VALUES (?, ?, ?, ?)",
               (user_id, "Science", 3, 4))
conn.commit()

# Generate study schedule
schedule = generate_study_schedule(user_id)

# Print generated schedule for clarity
print("\nGenerated Study Schedule:\n")
for session in schedule:
    print(f"Subject: {session[0]} | Start: {session[1]} | End: {session[2]}")

# Print database contents for verification
print("\nStored Users:\n")
cursor.execute("SELECT * FROM users")
for row in cursor.fetchall():
    print(row)

print("\nStored Subjects:\n")
cursor.execute("SELECT * FROM subjects")
for row in cursor.fetchall():
    print(row)

print("\nStored Study Sessions:\n")
cursor.execute("SELECT * FROM study_sessions")
for row in cursor.fetchall():
    print(row)

# Close connection
conn.close()
